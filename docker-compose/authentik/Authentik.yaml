---
services:
  postgresql:
    container_name: postgres_authentik
    image: docker.io/library/postgres:16-alpine
    networks:
      - devrack
    env_file:
      - ./.env
    ports:
      - "${SERVER_IP}:5432:5432"
    volumes:
      - /mnt/user/appdata/authentik/postgres/data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER:-authentik}
      POSTGRES_DB: ${POSTGRES_DB:-authentik}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    restart: unless-stopped

  redis:
    container_name: redis
    image: docker.io/library/redis:alpine
    networks:
      - devrack
    ports:
      - "${SERVER_IP}:6379:6379"
    volumes:
      - /mnt/user/appdata/redis:/redis
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    restart: unless-stopped
    depends_on:
      - postgresql

  server:
    container_name: authentik
    image: beryju/authentik:latest
    command: server
    networks:
      - devrack
    ports:
      - "${SERVER_IP}:9000:9000"
      - "${SERVER_IP}:9443:9443"
    volumes:
      - /mnt/user/appdata/authentik/authentik/templates:/templates
      - /mnt/user/appdata/authentik/authentik/geoip:/geoip
      - /var/run/docker.sock:/var/run/docker.sock
      - /mnt/user/appdata/authentik/authentik/media:/media
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgres_authentik
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_ERROR_REPORTING__ENABLED: true
      AUTHENTIK_SECRET_KEY: ${SECRET_KEY}
      AUTHENTIK_EVENTS__CONTEXT_PROCESSORS__GEOIP: /tmp/non-existent-file
      AUTHENTIK_EVENTS__CONTEXT_PROCESSORS__ASN: /tmp/non-existent-file
      AUTHENTIK_BOOTSTRAP_PASSWORD: ${BOOTSTRAP_PASSWORD}
      AUTHENTIK_BOOTSTRAP_EMAIL: ${BOOTSTRAP_EMAIL}
    restart: unless-stopped
    depends_on:
      - postgresql
      - redis

  worker:
    container_name: authentik-worker
    image: beryju/authentik:latest
    command: worker
    networks:
      - devrack
    volumes:
      - /mnt/user/appdata/authentik/authentik/backups:/backups
      - /mnt/user/appdata/authentik/authentik/media:/media
      - /mnt/user/appdata/authentik/authentik/certs:/certs
      - /var/run/docker.sock:/var/run/docker.sock
      - /mnt/user/appdata/authentik/authentik/templates:/templates
      - /mnt/user/appdata/authentik/authentik/geoip:/geoip
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgres_authentik
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_ERROR_REPORTING__ENABLED: true
      AUTHENTIK_SECRET_KEY: ${SECRET_KEY}
      # Authentik Email Settings
      AUTHENTIK_EMAIL__HOST: ${AUTHENTIK_EMAIL__HOST}
      AUTHENTIK_EMAIL__PORT: ${AUTHENTIK_EMAIL__PORT}
      AUTHENTIK_EMAIL__USERNAME: ${AUTHENTIK_EMAIL__USERNAME}
      AUTHENTIK_EMAIL__PASSWORD: ${AUTHENTIK_EMAIL__PASSWORD}
      AUTHENTIK_EMAIL__USE_TLS: ${AUTHENTIK_EMAIL__USE_TLS}
      AUTHENTIK_EMAIL__USE_SSL: ${AUTHENTIK_EMAIL__USE_SSL}
      AUTHENTIK_EMAIL__TIMEOUT: ${AUTHENTIK_EMAIL__TIMEOUT}
      AUTHENTIK_EMAIL__FROM: ${AUTHENTIK_EMAIL__FROM}
      AUTHENTIK_EVENTS__CONTEXT_PROCESSORS__GEOIP: /tmp/non-existent-file
      AUTHENTIK_EVENTS__CONTEXT_PROCESSORS__ASN: /tmp/non-existent-file
      AUTHENTIK_BOOTSTRAP_PASSWORD: ${BOOTSTRAP_PASSWORD}
      AUTHENTIK_BOOTSTRAP_EMAIL: ${BOOTSTRAP_EMAIL}
    restart: unless-stopped
    depends_on:
      - postgresql
      - redis

networks:
  devrack:
    name: ${DOCKER_NETWORK}
    external: true
